class Solution {
public:
    int rec(string s,string t,int i,int j)
    {
        if(j<0)return 1;
        if(i<0)return 0;

        if(s[i]==t[j]){return rec(s,t,i-1,j-1)+rec(s,t,i-1,j);
        }

        else return rec(s,t,i-1,j);
    }
    int tab(string s,string t)
    { int n=s.size(),m=t.size();
    vector<vector<long long>>dp(n+1,vector<long long>(m+1,0));

    for(int i=0;i<=n;i++)
    {
        for(int j=0;j<=m;j++)
        {
            if(j==0){
                dp[i][j]=1;
                continue;
            }
            if(i>0 && j>0 && s[i-1]==t[j-1]){
                dp[i][j]=(long long)(dp[i-1][j-1]+dp[i-1][j]);
            }
            else if(i>0)dp[i][j]=(long long)dp[i-1][j];
        }
    }
    return dp[n][m];

    }
    int numDistinct(string s, string t) {
        int n=s.size(),m=t.size();
       // return rec(s,t,n-1,m-1);
       return tab(s,t);
    }
};
